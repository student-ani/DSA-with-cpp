#include <iostream>
#include <vector>

using namespace std;

// Function to find the first occurrence of the target
int findFirstOccurrence(const vector<int>& nums, int target) {
    int low = 0, high = nums.size() - 1;
    int firstOccurrence = -1;
    
    while (low <= high) {
        int mid = low + (high - low) / 2;
        
        if (nums[mid] == target) {
            firstOccurrence = mid;
            high = mid - 1; // Look on the left side for the first occurrence
        } else if (nums[mid] < target) {
            low = mid + 1;
        } else {
            high = mid - 1;
        }
    }
    
    return firstOccurrence;
}

// Function to find the last occurrence of the target
int findLastOccurrence(const vector<int>& nums, int target) {
    int low = 0, high = nums.size() - 1;
    int lastOccurrence = -1;
    
    while (low <= high) {
        int mid = low + (high - low) / 2;
        
        if (nums[mid] == target) {
            lastOccurrence = mid;
            low = mid + 1; // Look on the right side for the last occurrence
        } else if (nums[mid] < target) {
            low = mid + 1;
        } else {
            high = mid - 1;
        }
    }
    
    return lastOccurrence;
}

int main() {
    vector<int> nums = {5, 7, 7, 8, 8, 10};
    int target = 8;
    
    int firstIndex = findFirstOccurrence(nums, target);
    int lastIndex = findLastOccurrence(nums, target);
    
    if (firstIndex != -1) {
        cout << "First occurrence of " << target << " is at index " << firstIndex << endl;
        cout << "Last occurrence of " << target << " is at index " << lastIndex << endl;
    } else {
        cout << target << " not found in the array." << endl;
    }
    
    return 0;
}


#include <iostream>
#include <vector>

using namespace std;

// Function to merge two halves of the array and count inversions
long long mergeAndCount(vector<int>& arr, int left, int mid, int right) {
    // Sizes of the two subarrays
    int n1 = mid - left + 1;
    int n2 = right - mid;
    
    // Temporary arrays to hold the left and right subarrays
    vector<int> leftArr(n1);
    vector<int> rightArr(n2);
    
    // Copy the data to temporary arrays
    for (int i = 0; i < n1; i++)
        leftArr[i] = arr[left + i];
    for (int i = 0; i < n2; i++)
        rightArr[i] = arr[mid + 1 + i];
    
    // Merge the temporary arrays back into the original array
    int i = 0, j = 0, k = left;
    long long invCount = 0;
    
    while (i < n1 && j < n2) {
        if (leftArr[i] <= rightArr[j]) {
            arr[k++] = leftArr[i++];
        } else {
            arr[k++] = rightArr[j++];
            // All remaining elements in leftArr[i...n1-1] are greater than rightArr[j-1]
            invCount += (n1 - i);
        }
    }
    
    // Copy the remaining elements of leftArr[], if any
    while (i < n1)
        arr[k++] = leftArr[i++];
    
    // Copy the remaining elements of rightArr[], if any
    while (j < n2)
        arr[k++] = rightArr[j++];
    
    return invCount;
}

// Function to sort the array and count inversions using merge sort
long long mergeSortAndCount(vector<int>& arr, int left, int right) {
    long long invCount = 0;
    if (left < right) {
        int mid = left + (right - left) / 2;
        
        // Count inversions in the left half
        invCount += mergeSortAndCount(arr, left, mid);
        
        // Count inversions in the right half
        invCount += mergeSortAndCount(arr, mid + 1, right);
        
        // Count inversions during the merge step
        invCount += mergeAndCount(arr, left, mid, right);
    }
    return invCount;
}

int main() {
    vector<int> arr = {5, 3, 2, 4, 1};
    long long inversionCount = mergeSortAndCount(arr, 0, arr.size() - 1);
    
    cout << "Number of inversions: " << inversionCount << endl;
    return 0;
}

